// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para os níveis de acesso
enum Role {
  COMUM
  AVALIADOR
  GESTOR
  ADMIN
}

model Company {
  id    String @id @default(uuid())
  name  String
  users User[]
  challenges Challenge[] // Relação: Uma empresa pode ter vários desafios

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ideas Idea[]
  connections Connection[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(COMUM)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ideas Idea[]
}


// --- INÍCIO DAS NOVAS ADIÇÕES ---

// Enum para o tipo de desafio
enum ChallengeType {
  INTERNO
  PUBLICO
}

// Modelo para os Desafios
model Challenge {
  id          String   @id @default(uuid())
  name        String
  description String
  area        String
  startDate   DateTime
  endDate     DateTime
  type        ChallengeType @default(INTERNO)
  
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ideas Idea[]
  connections Connection[]
}

enum FunnelStage {
  CAPTURE
  PRE_SCREENING
  IDEATION
  DETAILED_SCREENING
  POC
  ARCHIVED
}

// Modelo para as Ideias
model Idea {
  id          String   @id @default(uuid())
  title       String
  description String
  stage       FunnelStage @default(CAPTURE)
  priority    String   // Ex: "Alta", "Média", "Baixa"
  votes       Int      @default(0)

  // Relações
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StartupStage {
  IDEACAO
  OPERACAO
  TRACAO
  ESCALA
}

// Modelo para as Startups
model Startup {
  id          String   @id @default(uuid())
  name        String   @unique
  cnpj        String?  @unique
  segment     String   // Segmento de atuação, ex: FinTech
  problem     String   // Problema que resolve
  technology  String   // Tecnologias utilizadas
  stage       StartupStage @default(IDEACAO)
  location    String?
  founders    String?
  pitch       String?
  website     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  connections Connection[]
}

// --- INÍCIO DAS NOVAS ADIÇÕES ---

// Enum para o status da conexão
enum ConnectionStatus {
  NENHUM
  INTERESSE
  CONVIDADA
  POC
  REJEITADA
}

// Modelo para a Conexão entre Desafio e Startup
model Connection {
  id        String   @id @default(uuid())
  status    ConnectionStatus @default(NENHUM)
  
  // Relações
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  startupId String
  startup   Startup   @relation(fields: [startupId], references: [id])
  
  companyId String // Para saber a qual empresa pertence a conexão
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Garante que só pode haver uma conexão entre um desafio e uma startup
  @@unique([challengeId, startupId])
}